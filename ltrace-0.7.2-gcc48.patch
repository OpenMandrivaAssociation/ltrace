--- ltrace-d66c8b1/lens_default.c.omv~	2014-02-18 10:18:01.043982804 +0100
+++ ltrace-d66c8b1/lens_default.c	2014-02-18 10:18:10.695982409 +0100
@@ -344,7 +344,10 @@ format_array(FILE *stream, struct value
 {
 	/* We need "long" to be long enough to cover the whole address
 	 * space.  */
-	typedef char assert__long_enough_long[-(sizeof(long) < sizeof(void *))];
+	// This is known to be ok on all supported architectures, but the
+	// assert breaks the build with gcc >= 4.8 because unused local
+	// typedefs now generate a warning (and we're built with -Werror)
+	//typedef char assert__long_enough_long[-(sizeof(long) < sizeof(void *))];
 	long l;
 	if (expr_eval_word(length, value, arguments, &l) < 0)
 		return -1;
--- ltrace-d66c8b1/value.c.omv~	2014-02-18 10:15:54.050988003 +0100
+++ ltrace-d66c8b1/value.c	2014-02-18 10:17:33.767983921 +0100
@@ -284,7 +284,10 @@ value_init_deref(struct value *ret_val,
 
 	/* We need "long" to be long enough to hold platform
 	 * pointers.  */
-	typedef char assert__long_enough_long[-(sizeof(l) < sizeof(void *))];
+	// This is known to be ok on all supported architectures, but the
+	// assert breaks the build with gcc >= 4.8 because unused local
+	// typedefs now generate a warning (and we're built with -Werror)
+	//typedef char assert__long_enough_long[-(sizeof(l) < sizeof(void *))];
 
 	value_common_init(ret_val, valp->inferior, valp,
 			  valp->type->u.ptr_info.info, 0);
